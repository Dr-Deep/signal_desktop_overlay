--- ../../src/webrtc/src/build/toolchain/gcc_toolchain.gni.orig	2022-02-16 12:34:12.000000000 +0100
+++ ../../src/webrtc/src/build/toolchain/gcc_toolchain.gni	2022-02-18 10:32:32.217841000 +0100
@@ -49,6 +49,11 @@ if (enable_resource_allowlist_generation) {
       "enable_resource_allowlist_generation=true does not work for target_os=$target_os")
 }
 
+declare_args() {
+  extra_cxxflags = ""
+  extra_ldflags = ""
+}
+
 # This template defines a toolchain for something that works like gcc
 # (including clang).
 #
@@ -469,7 +474,8 @@ template("gcc_toolchain") {
         # --whole-archive, --no-whole-archive flags are not available on the aix ld.
         rspfile_content = "{{inputs}} {{solibs}} {{libs}} {{rlibs}}"
       } else {
-        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}} {{rlibs}}"
+#        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}} {{rlibs}}"
+        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"
       }
 
       description = "SOLINK $sofile"
@@ -547,7 +553,8 @@ template("gcc_toolchain") {
         strip_command = "${invoker.strip} -o \"$sofile\" \"$unstripped_sofile\""
         command += " && " + strip_command
       }
-      rspfile_content = "$whole_archive_flag {{inputs}} {{solibs}} $no_whole_archive_flag {{libs}} {{rlibs}}"
+#      rspfile_content = "$whole_archive_flag {{inputs}} {{solibs}} $no_whole_archive_flag {{libs}} {{rlibs}}"
+      rspfile_content = "$whole_archive_flag {{inputs}} {{solibs}} $no_whole_archive_flag {{libs}}"
 
       description = "SOLINK_MODULE $sofile"
 
@@ -621,7 +628,8 @@ template("gcc_toolchain") {
       command = "$python_path \"$link_wrapper\" --output=\"$outfile\"$strip_switch$map_switch$dwp_switch -- $link_command"
 
       description = "LINK $outfile"
-      rspfile_content = "{{inputs}} {{rlibs}}"
+#      rspfile_content = "{{inputs}} {{rlibs}}"
+      rspfile_content = "{{inputs}}"
       outputs = [ outfile ]
       if (outfile != unstripped_outfile) {
         outputs += [ unstripped_outfile ]
@@ -736,13 +744,23 @@ template("clang_toolchain") {
   }
 
   gcc_toolchain(target_name) {
-    prefix = rebase_path("$clang_base_path/bin", root_build_dir)
-    cc = "$prefix/clang"
-    cxx = "$prefix/clang++"
-    ld = cxx
-    readelf = "${toolprefix}readelf"
-    ar = "${prefix}/llvm-ar"
-    nm = "${prefix}/llvm-nm"
+    if (is_bsd) {
+      prefix = "/usr/local/bin"
+      cc = "cc"
+      cxx = "c++"
+      ld = cxx
+      readelf = "${toolprefix}/readelf"
+      ar = "${prefix}/ar"
+      nm = "${prefix}/nm"
+    } else {
+      prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+      cc = "$prefix/clang"
+      cxx = "$prefix/clang++"
+      ld = cxx
+      readelf = "${prefix}/readelf"
+      ar = "${prefix}/llvm-ar"
+      nm = "${prefix}/llvm-nm"
+    }
 
     forward_variables_from(invoker,
                            [
